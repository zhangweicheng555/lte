<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.boot.kaizen.dao.lte.LteCellCheckDao">

	
	
	<select id="find" resultType="LteCellCheck">
		 select lp.* 
		 from
		 lte_cell_check lp 
		 where 1=1
		 <if test="map.projId != null and map.projId != ''">
            and lp.projId = #{map.projId}
        </if>
		 <if test="map.eNodeBID != null and map.eNodeBID != ''">
            and lp.eNodeBID  = #{map.eNodeBID}
        </if>
		 <if test="map.cellId != null and map.cellId != ''">
            and lp.cellId  = #{map.cellId}
        </if>
		 <if test="map.testDate != null and map.testDate != ''">
            and lp.testDate = #{map.testDate}
        </if>
		 order by lp.createTime desc
	</select>
	<select id="findListByMenodeBID" resultType="LteCellCheck">
		 select lp.* 
		 from
		 lte_cell_check lp 
         where  lp.eNodeBID =#{mENodeBID}
	</select>
	
	<delete id="delete">
		 delete from lte_cell_check
		 where id in
		 <foreach collection="idsArray" index="index" item="item"
            open="(" separator="," close=")">
            #{item}
        </foreach>
	</delete>
	
	<delete id="deleteByeNodeBID">
		 delete from lte_cell_check
		 where eNodeBID =#{mENodeBID}
	</delete>
	
	<insert id ="batchInsert" parameterType="java.util.List" >
           insert into lte_cell_check
           (
			userId
			,eNodeBID
			,communityName  
			,testDate
			,csfbTestCount
			,csfbFallSuccessCount
			,csfbFallRate
			,goodFtpUpAverageRsrp
			,goodFtpUpAverageSinr
			,goodFtpUpRate
			,generalFtpUpAverageRsrp
			,generalFtpUpAverageSinr
			,generalFtpUpRate
			,poorFtpUpAverageRsrp
			,poorFtpUpAverageSinr
			,poorFtpUpRate
			,goodFtpDownAverageRsrp
			,goodFtpDownAverageSinr
			,goodFtpDownRate
			,generalFtpDownAverageRsrp
			,generalFtpDownAverageSinr
			,generalFtpDownRate
			,poorFtpDownAverageRsrp
			,poorFtpDownAverageSinr
			,poorFtpDownRate
			,pci
			,tac
			,cellId
			,frequency
			,projId
			,createTime
			)
           values
            <foreach collection ="cellChecks" item="item" index= "index" separator =",">
                (
                	#{item.userId}
					,#{item.eNodeBID}
					,#{item.communityName}
					,#{item.testDate}
					,#{item.csfbTestCount}
					,#{item.csfbFallSuccessCount}
					,#{item.csfbFallRate}
					,#{item.goodFtpUpAverageRsrp}
					,#{item.goodFtpUpAverageSinr}
					,#{item.goodFtpUpRate}
					,#{item.generalFtpUpAverageRsrp}
					,#{item.generalFtpUpAverageSinr}
					,#{item.generalFtpUpRate}
					,#{item.poorFtpUpAverageRsrp}
					,#{item.poorFtpUpAverageSinr}
					,#{item.poorFtpUpRate}
					,#{item.goodFtpDownAverageRsrp}
					,#{item.goodFtpDownAverageSinr}
					,#{item.goodFtpDownRate}
					,#{item.generalFtpDownAverageRsrp}
					,#{item.generalFtpDownAverageSinr}
					,#{item.generalFtpDownRate}
					,#{item.poorFtpDownAverageRsrp}
					,#{item.poorFtpDownAverageSinr}
					,#{item.poorFtpDownRate}
					,#{item.pci}
					,#{item.tac}
					,#{item.cellId}
					,#{item.frequency}
					,#{item.projId}
					,#{item.createTime}
                )
            </foreach >
     </insert>
     
     
   <update id="updateByPrimaryKeySelective" parameterType="LteCellCheck">
    update lte_cell_check
    <set>
      <if test="userId != null">
        userId = #{userId},
      </if>
      <if test="eNodeBID != null">
        eNodeBID = #{eNodeBID},
      </if>
      <if test="communityName != null">
        communityName = #{communityName},
      </if>
      <if test="csfbTestCount != null">
        csfbTestCount = #{csfbTestCount},
      </if>
      <if test="csfbFallSuccessCount != null">
        csfbFallSuccessCount = #{csfbFallSuccessCount},
      </if>
      <if test="csfbFallRate != null">
        csfbFallRate = #{csfbFallRate},
      </if>
      <if test="goodFtpUpAverageRsrp != null">
        goodFtpUpAverageRsrp = #{goodFtpUpAverageRsrp},
      </if>
      <if test="goodFtpUpAverageSinr != null">
        goodFtpUpAverageSinr = #{goodFtpUpAverageSinr},
      </if>
      <if test="goodFtpUpRate != null">
        goodFtpUpRate = #{goodFtpUpRate},
      </if>
      <if test="generalFtpUpAverageRsrp != null">
        generalFtpUpAverageRsrp = #{generalFtpUpAverageRsrp},
      </if>
      <if test="generalFtpUpAverageSinr != null">
        generalFtpUpAverageSinr = #{generalFtpUpAverageSinr},
      </if>
      <if test="generalFtpUpRate != null">
        generalFtpUpRate = #{generalFtpUpRate},
      </if>
      <if test="poorFtpUpAverageRsrp != null">
        poorFtpUpAverageRsrp = #{poorFtpUpAverageRsrp},
      </if>
      <if test="poorFtpUpAverageSinr != null">
        poorFtpUpAverageSinr = #{poorFtpUpAverageSinr},
      </if>
      <if test="poorFtpUpRate != null">
        poorFtpUpRate = #{poorFtpUpRate},
      </if>
      <if test="goodFtpDownAverageRsrp != null">
        goodFtpDownAverageRsrp = #{goodFtpDownAverageRsrp},
      </if>
      <if test="goodFtpDownAverageSinr != null">
        goodFtpDownAverageSinr = #{goodFtpDownAverageSinr},
      </if>
      <if test="goodFtpDownRate != null">
        goodFtpDownRate = #{goodFtpDownRate},
      </if>
      <if test="generalFtpDownAverageRsrp != null">
        generalFtpDownAverageRsrp = #{generalFtpDownAverageRsrp},
      </if>
      <if test="generalFtpDownAverageSinr != null">
        generalFtpDownAverageSinr = #{generalFtpDownAverageSinr},
      </if>
      <if test="generalFtpDownRate != null">
        generalFtpDownRate = #{generalFtpDownRate},
      </if>
      <if test="poorFtpDownAverageRsrp != null">
        poorFtpDownAverageRsrp = #{poorFtpDownAverageRsrp},
      </if>
      <if test="poorFtpDownAverageSinr != null">
        poorFtpDownAverageSinr = #{poorFtpDownAverageSinr},
      </if>
      <if test="poorFtpDownRate != null">
        poorFtpDownRate = #{poorFtpDownRate},
      </if>
      <if test="pci != null">
        pci = #{pci},
      </if>
      <if test="tac != null">
        tac = #{tac},
      </if>
      <if test="cellId != null">
        cellId = #{cellId},
      </if>
      <if test="frequency != null">
        frequency = #{frequency},
      </if>
      <if test="projId != null">
        projId = #{projId},
      </if>
      <if test="createTime != null">
        createTime = #{createTime},
      </if>
      <if test="updateTime != null">
        updateTime = #{updateTime},
      </if>
      <if test="testDate != null">
        testDate = #{testDate},
      </if>
    </set>
    where id = #{id}
  </update>
</mapper>